package Imaging::Routes::directory;
use Dancer ':syntax';
use Dancer::Plugin::Imaging::Routes::Common;
use Dancer::Plugin::Auth::RBAC;
use Dancer::Plugin::Database;
use Catmandu::Sane;
use Catmandu qw(store);
use Catmandu::Util qw(:is);
use Data::Pageset;
use Try::Tiny;
use Data::Pageset;
use URI::Escape qw(uri_escape);

sub core {
    state $core = store("core");
}
sub indexer {
    state $index = store("index")->bag("locations");
}
sub locations {
    state $locations = core()->bag("locations");
}
sub dbi_handle {
    state $dbi_handle = database;
}
hook before => sub {
    if(request->path =~ /^\/(ready|reprocessing)/o){
		my $auth = auth;
		my $authd = authd;
		my $subpath = $1;
		if(!$authd){
			my $service = uri_escape(uri_for(request->path));
			return redirect(uri_for("/login")."?service=$service");
		}elsif(!$auth->asa('scanner')){
			request->path_info('/access_denied');
            my $params = params;
            $params->{operation} = "directory $subpath";
            $params->{action} = "view";
            $params->{referrer} = request->referer;
		}
	}
};
any('/ready',sub {
	my $params = params;
    my $indexer = indexer();
    my %opts = (
        query => "user_id:\"".session('user')->{id}."\" AND stadium:ready",
        reify => locations()
    );
    my $result = indexer->search(%opts);
	my $user = dbi_handle->quick_select('users',{ id => session('user')->{id} });
	template('ready',{
		locations => $result->hits,
		auth => auth(),
		user => $user,
		mount_conf => mount_conf()
	});
});
any('/reprocessing',sub {
    my $params = params;
    my $indexer = indexer();
    my %opts = (
        query => "user_id:\"".session('user')->{id}."\" AND stadium:reprocessing",
        reify => locations()
    );
    my $result = indexer->search(%opts);
    my $user = dbi_handle->quick_select('users',{ id => session('user')->{id} });
    template('reprocessing',{
        locations => $result->hits,
        auth => auth(),
        user => $user,
        mount_conf => mount_conf()
    });
});
any('/ready/:directory/status',sub{
	my $config = config;
    my $params = params;
    my %opts = (
        query => "user_id:\"".session('user')->{id}."\" AND stadium:ready AND id:\"".$params->{id}."\"",
        reify => locations(),
        limit => 1
    );
    my $result = indexer->search(%opts);

	($result->total > 0) or return not_found();
	my $user = dbi_handle->quick_select('users',{ id => session('user')->{id} });
	template('status',{
		location => $result->hits->[0],
		auth => auth(),
        user => $user,
        mount_conf => mount_conf()
	});
});

true;
